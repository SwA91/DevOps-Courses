services:
  db:
    # ${variable env}
    container_name: ${MONGO_DB_NAME}
    image: mongo:6.0
    volumes:
      - poke-vol:/data/db
    # ojo con mongo en local
    # no hace falta exponerlo ya que otro container lo usa
    # mejor no exponerlo al mundo sino a otro contenedor dentro de network
    # ports:
    #   - 27017:27017
    # siempre reinicia el servicio
    restart: always
    # variables que mongo acepta
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    # mandamos commandos
    # auth obliga autenticarse
    command: ["--auth"]
  mongo-express:
    depends_on:
      - db
    image: mongo-express:1.0.0-alpha.4
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      # En el network se reutiliza esta variable
      ME_CONFIG_MONGODB_SERVER: ${MONGO_DB_NAME}
    ports:
      - 8080:8081
    restart: always

  # app consumidora de la db
  poke-app:
    # dependemos de dos servicios
    depends_on:
      - db
      - mongo-express
    # nos traemos la imagen de la app
    image: klerith/pokemon-nest-app:1.0.0
    # el desarrollador tiene que explicar que puerto expone
    ports:
      - 3000:3000
    # el desarrollador tiene que decir que variables necesita
    environment:
      # MONGO_DB_NAME es el nombre del contenedor donde esta desplegado la bbdd
      MONGODB: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_DB_NAME}:27017
      DB_NAME: ${MONGO_DB_NAME}
    restart: always

volumes:
  poke-vol:
    # obligamos a que se cree un nuevo volumen
    external: false
